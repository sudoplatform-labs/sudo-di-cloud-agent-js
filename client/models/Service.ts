/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Service
 */
export interface Service {
  /**
   * Array of supported media types
   * @type {Array<string>}
   * @memberof Service
   */
  accept?: Array<string>;
  /**
   * Service ID
   * @type {string}
   * @memberof Service
   */
  id: string;
  /**
   * Priority of the service endpoint
   * @type {number}
   * @memberof Service
   */
  priority?: number;
  /**
   * Array of did key references to denote the default recipients
   * @type {Array<string>}
   * @memberof Service
   */
  recipientKeys: Array<string>;
  /**
   * Array of did key references to denote individual routing hops
   * @type {Array<string>}
   * @memberof Service
   */
  routingKeys?: Array<string>;
  /**
   * Service endpoint URL
   * @type {string}
   * @memberof Service
   */
  serviceEndpoint: string;
  /**
   * Service Type
   * @type {string}
   * @memberof Service
   */
  type: string;
}

export function ServiceFromJSON(json: any): Service {
  return ServiceFromJSONTyped(json, false);
}

export function ServiceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Service {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    accept: !exists(json, 'accept') ? undefined : json['accept'],
    id: json['id'],
    priority: !exists(json, 'priority') ? undefined : json['priority'],
    recipientKeys: json['recipientKeys'],
    routingKeys: !exists(json, 'routingKeys') ? undefined : json['routingKeys'],
    serviceEndpoint: json['serviceEndpoint'],
    type: json['type'],
  };
}

export function ServiceToJSON(value?: Service | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    accept: value.accept,
    id: value.id,
    priority: value.priority,
    recipientKeys: value.recipientKeys,
    routingKeys: value.routingKeys,
    serviceEndpoint: value.serviceEndpoint,
    type: value.type,
  };
}
