/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ClaimsQuery
 */
export interface ClaimsQuery {
  /**
   * mdoc only:  a string that specifies the data element identifier of the data element within the provided namespace in the mdoc
   * @type {string}
   * @memberof ClaimsQuery
   */
  claim_name?: string;
  /**
   * Identifier for this claims query.
   * @type {string}
   * @memberof ClaimsQuery
   */
  id?: string;
  /**
   * mdoc only: a string that specifies the namespace of the data element within the mdoc.
   * @type {string}
   * @memberof ClaimsQuery
   */
  namespace?: string;
  /**
   * JSON-based claims structure only: a non-empty array representing a claims path pointer that specifies the path to a claim
   * @type {Array<object>}
   * @memberof ClaimsQuery
   */
  path?: Array<object>;
  /**
   * Values of the claims query.
   * @type {Array<object>}
   * @memberof ClaimsQuery
   */
  values?: Array<object>;
}

export function ClaimsQueryFromJSON(json: any): ClaimsQuery {
  return ClaimsQueryFromJSONTyped(json, false);
}

export function ClaimsQueryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClaimsQuery {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    claim_name: !exists(json, 'claim_name') ? undefined : json['claim_name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    namespace: !exists(json, 'namespace') ? undefined : json['namespace'],
    path: !exists(json, 'path') ? undefined : json['path'],
    values: !exists(json, 'values') ? undefined : json['values'],
  };
}

export function ClaimsQueryToJSON(value?: ClaimsQuery | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    claim_name: value.claim_name,
    id: value.id,
    namespace: value.namespace,
    path: value.path,
    values: value.values,
  };
}
