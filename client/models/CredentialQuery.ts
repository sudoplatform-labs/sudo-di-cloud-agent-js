/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ClaimsQuery,
  ClaimsQueryFromJSON,
  ClaimsQueryFromJSONTyped,
  ClaimsQueryToJSON,
  CredentialMeta,
  CredentialMetaFromJSON,
  CredentialMetaFromJSONTyped,
  CredentialMetaToJSON,
} from './';

/**
 *
 * @export
 * @interface CredentialQuery
 */
export interface CredentialQuery {
  /**
   *
   * @type {Array<Array<string>>}
   * @memberof CredentialQuery
   */
  claim_sets?: Array<Array<string>>;
  /**
   *
   * @type {Array<ClaimsQuery>}
   * @memberof CredentialQuery
   */
  claims?: Array<ClaimsQuery>;
  /**
   * Credential format specified by the credential query.
   * @type {string}
   * @memberof CredentialQuery
   */
  format: string;
  /**
   * Identifier of the credential query.
   * @type {string}
   * @memberof CredentialQuery
   */
  id: string;
  /**
   * Metadata about the Credential Query
   * @type {CredentialMeta}
   * @memberof CredentialQuery
   */
  meta?: CredentialMeta;
}

export function CredentialQueryFromJSON(json: any): CredentialQuery {
  return CredentialQueryFromJSONTyped(json, false);
}

export function CredentialQueryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CredentialQuery {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    claim_sets: !exists(json, 'claim_sets') ? undefined : json['claim_sets'],
    claims: !exists(json, 'claims')
      ? undefined
      : (json['claims'] as Array<any>).map(ClaimsQueryFromJSON),
    format: json['format'],
    id: json['id'],
    meta: !exists(json, 'meta')
      ? undefined
      : CredentialMetaFromJSON(json['meta']),
  };
}

export function CredentialQueryToJSON(value?: CredentialQuery | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    claim_sets: value.claim_sets,
    claims:
      value.claims === undefined
        ? undefined
        : (value.claims as Array<any>).map(ClaimsQueryToJSON),
    format: value.format,
    id: value.id,
    meta: CredentialMetaToJSON(value.meta),
  };
}
