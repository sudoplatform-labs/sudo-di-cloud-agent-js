/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.10.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface JwtSupportedCredCreateRequest
 */
export interface JwtSupportedCredCreateRequest {
  /**
   *
   * @type {Array<object>}
   * @memberof JwtSupportedCredCreateRequest
   */
  context: Array<object>;
  /**
   * Metadata about the Credential Subject to help with display.
   * @type {object}
   * @memberof JwtSupportedCredCreateRequest
   */
  credentialSubject?: object;
  /**
   *
   * @type {Array<string>}
   * @memberof JwtSupportedCredCreateRequest
   */
  cryptographic_binding_methods_supported?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof JwtSupportedCredCreateRequest
   */
  cryptographic_suites_supported?: Array<string>;
  /**
   *
   * @type {Array<object>}
   * @memberof JwtSupportedCredCreateRequest
   */
  display?: Array<object>;
  /**
   *
   * @type {string}
   * @memberof JwtSupportedCredCreateRequest
   */
  format: string;
  /**
   *
   * @type {string}
   * @memberof JwtSupportedCredCreateRequest
   */
  id: string;
  /**
   * The order in which claims should be displayed. This is not well defined by the spec right now. Best to omit for now.
   * @type {Array<string>}
   * @memberof JwtSupportedCredCreateRequest
   */
  order?: Array<string>;
  /**
   * List of credential types supported.
   * @type {Array<string>}
   * @memberof JwtSupportedCredCreateRequest
   */
  type: Array<string>;
}

export function JwtSupportedCredCreateRequestFromJSON(
  json: any,
): JwtSupportedCredCreateRequest {
  return JwtSupportedCredCreateRequestFromJSONTyped(json, false);
}

export function JwtSupportedCredCreateRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): JwtSupportedCredCreateRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    context: json['@context'],
    credentialSubject: !exists(json, 'credentialSubject')
      ? undefined
      : json['credentialSubject'],
    cryptographic_binding_methods_supported: !exists(
      json,
      'cryptographic_binding_methods_supported',
    )
      ? undefined
      : json['cryptographic_binding_methods_supported'],
    cryptographic_suites_supported: !exists(
      json,
      'cryptographic_suites_supported',
    )
      ? undefined
      : json['cryptographic_suites_supported'],
    display: !exists(json, 'display') ? undefined : json['display'],
    format: json['format'],
    id: json['id'],
    order: !exists(json, 'order') ? undefined : json['order'],
    type: json['type'],
  };
}

export function JwtSupportedCredCreateRequestToJSON(
  value?: JwtSupportedCredCreateRequest | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    '@context': value.context,
    credentialSubject: value.credentialSubject,
    cryptographic_binding_methods_supported:
      value.cryptographic_binding_methods_supported,
    cryptographic_suites_supported: value.cryptographic_suites_supported,
    display: value.display,
    format: value.format,
    id: value.id,
    order: value.order,
    type: value.type,
  };
}
