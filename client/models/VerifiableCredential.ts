/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  LinkedDataProof,
  LinkedDataProofFromJSON,
  LinkedDataProofFromJSONTyped,
  LinkedDataProofToJSON,
} from './';

/**
 *
 * @export
 * @interface VerifiableCredential
 */
export interface VerifiableCredential {
  /**
   * The JSON-LD context of the credential
   * @type {Array<object>}
   * @memberof VerifiableCredential
   */
  context: Array<object>;
  /**
   *
   * @type {object}
   * @memberof VerifiableCredential
   */
  credentialStatus?: object;
  /**
   *
   * @type {object}
   * @memberof VerifiableCredential
   */
  credentialSubject: object;
  /**
   * The expiration date
   * @type {string}
   * @memberof VerifiableCredential
   */
  expirationDate?: string;
  /**
   * The ID of the credential
   * @type {string}
   * @memberof VerifiableCredential
   */
  id?: string;
  /**
   * The issuance date
   * @type {string}
   * @memberof VerifiableCredential
   */
  issuanceDate?: string;
  /**
   * The JSON-LD Verifiable Credential Issuer. Either string of object with id field.
   * @type {object}
   * @memberof VerifiableCredential
   */
  issuer: object;
  /**
   * The proof of the credential
   * @type {LinkedDataProof}
   * @memberof VerifiableCredential
   */
  proof: LinkedDataProof;
  /**
   * The JSON-LD type of the credential
   * @type {Array<string>}
   * @memberof VerifiableCredential
   */
  type: Array<string>;
  /**
   * The valid from date
   * @type {string}
   * @memberof VerifiableCredential
   */
  validFrom?: string;
  /**
   * The valid until date
   * @type {string}
   * @memberof VerifiableCredential
   */
  validUntil?: string;
}

export function VerifiableCredentialFromJSON(json: any): VerifiableCredential {
  return VerifiableCredentialFromJSONTyped(json, false);
}

export function VerifiableCredentialFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): VerifiableCredential {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    context: json['@context'],
    credentialStatus: !exists(json, 'credentialStatus')
      ? undefined
      : json['credentialStatus'],
    credentialSubject: json['credentialSubject'],
    expirationDate: !exists(json, 'expirationDate')
      ? undefined
      : json['expirationDate'],
    id: !exists(json, 'id') ? undefined : json['id'],
    issuanceDate: !exists(json, 'issuanceDate')
      ? undefined
      : json['issuanceDate'],
    issuer: json['issuer'],
    proof: LinkedDataProofFromJSON(json['proof']),
    type: json['type'],
    validFrom: !exists(json, 'validFrom') ? undefined : json['validFrom'],
    validUntil: !exists(json, 'validUntil') ? undefined : json['validUntil'],
  };
}

export function VerifiableCredentialToJSON(
  value?: VerifiableCredential | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    '@context': value.context,
    credentialStatus: value.credentialStatus,
    credentialSubject: value.credentialSubject,
    expirationDate: value.expirationDate,
    id: value.id,
    issuanceDate: value.issuanceDate,
    issuer: value.issuer,
    proof: LinkedDataProofToJSON(value.proof),
    type: value.type,
    validFrom: value.validFrom,
    validUntil: value.validUntil,
  };
}
