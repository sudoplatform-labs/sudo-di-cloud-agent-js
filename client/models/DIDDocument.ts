/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Service,
  ServiceFromJSON,
  ServiceFromJSONTyped,
  ServiceToJSON,
  VerificationMethod,
  VerificationMethodFromJSON,
  VerificationMethodFromJSONTyped,
  VerificationMethodToJSON,
} from './';

/**
 *
 * @export
 * @interface DIDDocument
 */
export interface DIDDocument {
  /**
   * Assertion Methods
   * @type {Array<string>}
   * @memberof DIDDocument
   */
  assertionMethod?: Array<string>;
  /**
   * Authentication Methods
   * @type {Array<string>}
   * @memberof DIDDocument
   */
  authentication: Array<string>;
  /**
   * DID Document controllers
   * @type {Array<string>}
   * @memberof DIDDocument
   */
  controller: Array<string>;
  /**
   * DID ID
   * @type {string}
   * @memberof DIDDocument
   */
  id: string;
  /**
   * Services
   * @type {Array<Service>}
   * @memberof DIDDocument
   */
  service?: Array<Service>;
  /**
   * Verification Methods
   * @type {Array<VerificationMethod>}
   * @memberof DIDDocument
   */
  verificationMethod: Array<VerificationMethod>;
}

export function DIDDocumentFromJSON(json: any): DIDDocument {
  return DIDDocumentFromJSONTyped(json, false);
}

export function DIDDocumentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DIDDocument {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    assertionMethod: !exists(json, 'assertionMethod')
      ? undefined
      : json['assertionMethod'],
    authentication: json['authentication'],
    controller: json['controller'],
    id: json['id'],
    service: !exists(json, 'service')
      ? undefined
      : (json['service'] as Array<any>).map(ServiceFromJSON),
    verificationMethod: (json['verificationMethod'] as Array<any>).map(
      VerificationMethodFromJSON,
    ),
  };
}

export function DIDDocumentToJSON(value?: DIDDocument | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    assertionMethod: value.assertionMethod,
    authentication: value.authentication,
    controller: value.controller,
    id: value.id,
    service:
      value.service === undefined
        ? undefined
        : (value.service as Array<any>).map(ServiceToJSON),
    verificationMethod: (value.verificationMethod as Array<any>).map(
      VerificationMethodToJSON,
    ),
  };
}
