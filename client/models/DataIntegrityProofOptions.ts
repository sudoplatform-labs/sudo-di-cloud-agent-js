/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.10.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface DataIntegrityProofOptions
 */
export interface DataIntegrityProofOptions {
  /**
   * The value is used once for a particular domain and window of time.                     This value is used to mitigate replay attacks.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  challenge?: string;
  /**
   * The date and time the proof was created is OPTIONAL and, if                     included, MUST be specified as an [XMLSCHEMA11-2]                         dateTimeStamp string
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  created?: string;
  /**
   * An identifier for the cryptographic suite that can be used to                     verify the proof.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  cryptosuite: string;
  /**
   * It conveys one or more security domains in which the proof is                     meant to be used.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  domain?: string;
  /**
   * The expires property is OPTIONAL and, if present, specifies when                     the proof expires. If present, it MUST be an [XMLSCHEMA11-2]                         dateTimeStamp string
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  expires?: string;
  /**
   * An optional identifier for the proof, which MUST be a URL [URL],                     such as a UUID as a URN
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  id?: string;
  /**
   * One use of this field is to increase privacy by decreasing                 linkability that is the result of deterministically                     generated signatures.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  nonce?: string;
  /**
   * Each value identifies another data integrity proof that                 MUST verify before the current proof is processed.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  previousProof?: string;
  /**
   * The proof purpose acts as a safeguard to prevent the                 proof from being misused by being applied to a purpose other than                     the one that was intended.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  proofPurpose: string;
  /**
   * The value of the proof signature.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  proofValue?: string;
  /**
   * The specific type of proof MUST be specified as a string that maps                     to a URL [URL].
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  type: string;
  /**
   * A verification method is the means and information                 needed to verify the proof.
   * @type {string}
   * @memberof DataIntegrityProofOptions
   */
  verificationMethod: string;
}

export function DataIntegrityProofOptionsFromJSON(
  json: any,
): DataIntegrityProofOptions {
  return DataIntegrityProofOptionsFromJSONTyped(json, false);
}

export function DataIntegrityProofOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DataIntegrityProofOptions {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    challenge: !exists(json, 'challenge') ? undefined : json['challenge'],
    created: !exists(json, 'created') ? undefined : json['created'],
    cryptosuite: json['cryptosuite'],
    domain: !exists(json, 'domain') ? undefined : json['domain'],
    expires: !exists(json, 'expires') ? undefined : json['expires'],
    id: !exists(json, 'id') ? undefined : json['id'],
    nonce: !exists(json, 'nonce') ? undefined : json['nonce'],
    previousProof: !exists(json, 'previousProof')
      ? undefined
      : json['previousProof'],
    proofPurpose: json['proofPurpose'],
    proofValue: !exists(json, 'proofValue') ? undefined : json['proofValue'],
    type: json['type'],
    verificationMethod: json['verificationMethod'],
  };
}

export function DataIntegrityProofOptionsToJSON(
  value?: DataIntegrityProofOptions | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    challenge: value.challenge,
    created: value.created,
    cryptosuite: value.cryptosuite,
    domain: value.domain,
    expires: value.expires,
    id: value.id,
    nonce: value.nonce,
    previousProof: value.previousProof,
    proofPurpose: value.proofPurpose,
    proofValue: value.proofValue,
    type: value.type,
    verificationMethod: value.verificationMethod,
  };
}
