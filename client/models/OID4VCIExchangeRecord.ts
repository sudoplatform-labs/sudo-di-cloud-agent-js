/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.10.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface OID4VCIExchangeRecord
 */
export interface OID4VCIExchangeRecord {
  /**
   *
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  code?: string;
  /**
   * Time of record creation
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  created_at?: string;
  /**
   * desired claim and value in credential
   * @type {object}
   * @memberof OID4VCIExchangeRecord
   */
  credential_subject: object;
  /**
   * Exchange identifier
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  exchange_id?: string;
  /**
   * Information used to identify the issuer
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  issuer_id: string;
  /**
   *
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  nonce?: string;
  /**
   *
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  pin?: string;
  /**
   * Current record state
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  state?: string;
  /**
   * Identifier used to identify credential supported record
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  supported_cred_id: string;
  /**
   *
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  token?: string;
  /**
   * Time of last record update
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  updated_at?: string;
  /**
   * Information used to identify the issuer keys
   * @type {string}
   * @memberof OID4VCIExchangeRecord
   */
  verification_method: string;
}

export function OID4VCIExchangeRecordFromJSON(
  json: any,
): OID4VCIExchangeRecord {
  return OID4VCIExchangeRecordFromJSONTyped(json, false);
}

export function OID4VCIExchangeRecordFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): OID4VCIExchangeRecord {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: !exists(json, 'code') ? undefined : json['code'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'],
    credential_subject: json['credential_subject'],
    exchange_id: !exists(json, 'exchange_id') ? undefined : json['exchange_id'],
    issuer_id: json['issuer_id'],
    nonce: !exists(json, 'nonce') ? undefined : json['nonce'],
    pin: !exists(json, 'pin') ? undefined : json['pin'],
    state: !exists(json, 'state') ? undefined : json['state'],
    supported_cred_id: json['supported_cred_id'],
    token: !exists(json, 'token') ? undefined : json['token'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    verification_method: json['verification_method'],
  };
}

export function OID4VCIExchangeRecordToJSON(
  value?: OID4VCIExchangeRecord | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    code: value.code,
    created_at: value.created_at,
    credential_subject: value.credential_subject,
    exchange_id: value.exchange_id,
    issuer_id: value.issuer_id,
    nonce: value.nonce,
    pin: value.pin,
    state: value.state,
    supported_cred_id: value.supported_cred_id,
    token: value.token,
    updated_at: value.updated_at,
    verification_method: value.verification_method,
  };
}
