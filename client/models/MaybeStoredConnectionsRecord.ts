/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface MaybeStoredConnectionsRecord
 */
export interface MaybeStoredConnectionsRecord {
  /**
   * Connection acceptance: manual or auto
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  accept?: MaybeStoredConnectionsRecordAcceptEnum;
  /**
   * Optional alias to apply to connection for later use
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  alias?: string;
  /**
   * Connection identifier
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  connection_id?: string;
  /**
   *
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  connection_protocol?: MaybeStoredConnectionsRecordConnectionProtocolEnum;
  /**
   * Time of record creation
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  created_at?: string;
  /**
   * Error message
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  error_msg?: string;
  /**
   * Inbound routing connection id to use
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  inbound_connection_id?: string;
  /**
   * Public key for connection
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  invitation_key?: string;
  /**
   * Invitation mode
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  invitation_mode?: MaybeStoredConnectionsRecordInvitationModeEnum;
  /**
   * ID of out-of-band invitation message
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  invitation_msg_id?: string;
  /**
   * Our DID for connection
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  my_did?: string;
  /**
   * Connection request identifier
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  request_id?: string;
  /**
   * State per RFC 23
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  readonly rfc23_state?: string;
  /**
   * Current record state
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  state?: string;
  /**
   * Their DID for connection
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  their_did?: string;
  /**
   * Their label for connection
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  their_label?: string;
  /**
   * Other agent's public DID for connection
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  their_public_did?: string;
  /**
   * Their role in the connection protocol
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  their_role?: MaybeStoredConnectionsRecordTheirRoleEnum;
  /**
   * Time of last record update
   * @type {string}
   * @memberof MaybeStoredConnectionsRecord
   */
  updated_at?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum MaybeStoredConnectionsRecordAcceptEnum {
  Manual = 'manual',
  Auto = 'auto',
} /**
 * @export
 * @enum {string}
 */
export enum MaybeStoredConnectionsRecordConnectionProtocolEnum {
  Connections10 = 'connections/1.0',
  Didexchange10 = 'didexchange/1.0',
  Didexchange11 = 'didexchange/1.1',
} /**
 * @export
 * @enum {string}
 */
export enum MaybeStoredConnectionsRecordInvitationModeEnum {
  Once = 'once',
  Multi = 'multi',
  Static = 'static',
} /**
 * @export
 * @enum {string}
 */
export enum MaybeStoredConnectionsRecordTheirRoleEnum {
  Invitee = 'invitee',
  Requester = 'requester',
  Inviter = 'inviter',
  Responder = 'responder',
}

export function MaybeStoredConnectionsRecordFromJSON(
  json: any,
): MaybeStoredConnectionsRecord {
  return MaybeStoredConnectionsRecordFromJSONTyped(json, false);
}

export function MaybeStoredConnectionsRecordFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MaybeStoredConnectionsRecord {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    accept: !exists(json, 'accept') ? undefined : json['accept'],
    alias: !exists(json, 'alias') ? undefined : json['alias'],
    connection_id: !exists(json, 'connection_id')
      ? undefined
      : json['connection_id'],
    connection_protocol: !exists(json, 'connection_protocol')
      ? undefined
      : json['connection_protocol'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'],
    error_msg: !exists(json, 'error_msg') ? undefined : json['error_msg'],
    inbound_connection_id: !exists(json, 'inbound_connection_id')
      ? undefined
      : json['inbound_connection_id'],
    invitation_key: !exists(json, 'invitation_key')
      ? undefined
      : json['invitation_key'],
    invitation_mode: !exists(json, 'invitation_mode')
      ? undefined
      : json['invitation_mode'],
    invitation_msg_id: !exists(json, 'invitation_msg_id')
      ? undefined
      : json['invitation_msg_id'],
    my_did: !exists(json, 'my_did') ? undefined : json['my_did'],
    request_id: !exists(json, 'request_id') ? undefined : json['request_id'],
    rfc23_state: !exists(json, 'rfc23_state') ? undefined : json['rfc23_state'],
    state: !exists(json, 'state') ? undefined : json['state'],
    their_did: !exists(json, 'their_did') ? undefined : json['their_did'],
    their_label: !exists(json, 'their_label') ? undefined : json['their_label'],
    their_public_did: !exists(json, 'their_public_did')
      ? undefined
      : json['their_public_did'],
    their_role: !exists(json, 'their_role') ? undefined : json['their_role'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
  };
}

export function MaybeStoredConnectionsRecordToJSON(
  value?: MaybeStoredConnectionsRecord | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    accept: value.accept,
    alias: value.alias,
    connection_id: value.connection_id,
    connection_protocol: value.connection_protocol,
    created_at: value.created_at,
    error_msg: value.error_msg,
    inbound_connection_id: value.inbound_connection_id,
    invitation_key: value.invitation_key,
    invitation_mode: value.invitation_mode,
    invitation_msg_id: value.invitation_msg_id,
    my_did: value.my_did,
    request_id: value.request_id,
    state: value.state,
    their_did: value.their_did,
    their_label: value.their_label,
    their_public_did: value.their_public_did,
    their_role: value.their_role,
    updated_at: value.updated_at,
  };
}
