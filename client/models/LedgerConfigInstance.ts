/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface LedgerConfigInstance
 */
export interface LedgerConfigInstance {
  /**
   * Endorser service alias (optional)
   * @type {string}
   * @memberof LedgerConfigInstance
   */
  endorser_alias?: string;
  /**
   * Endorser DID (optional)
   * @type {string}
   * @memberof LedgerConfigInstance
   */
  endorser_did?: string;
  /**
   * Ledger identifier. Auto-generated UUID4 if not provided
   * @type {string}
   * @memberof LedgerConfigInstance
   */
  id: string;
  /**
   * Production-grade ledger (true/false)
   * @type {boolean}
   * @memberof LedgerConfigInstance
   */
  is_production: boolean;
  /**
   * Write capability enabled (default: False)
   * @type {boolean}
   * @memberof LedgerConfigInstance
   */
  is_write?: boolean;
  /**
   * Keep-alive timeout in seconds for idle connections
   * @type {number}
   * @memberof LedgerConfigInstance
   */
  keepalive?: number;
  /**
   * Ledger pool name (defaults to ledger ID if not specified)
   * @type {string}
   * @memberof LedgerConfigInstance
   */
  pool_name?: string;
  /**
   * Read-only access (default: False)
   * @type {boolean}
   * @memberof LedgerConfigInstance
   */
  read_only?: boolean;
  /**
   * SOCKS proxy URL (optional)
   * @type {string}
   * @memberof LedgerConfigInstance
   */
  socks_proxy?: string;
}

export function LedgerConfigInstanceFromJSON(json: any): LedgerConfigInstance {
  return LedgerConfigInstanceFromJSONTyped(json, false);
}

export function LedgerConfigInstanceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LedgerConfigInstance {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    endorser_alias: !exists(json, 'endorser_alias')
      ? undefined
      : json['endorser_alias'],
    endorser_did: !exists(json, 'endorser_did')
      ? undefined
      : json['endorser_did'],
    id: json['id'],
    is_production: json['is_production'],
    is_write: !exists(json, 'is_write') ? undefined : json['is_write'],
    keepalive: !exists(json, 'keepalive') ? undefined : json['keepalive'],
    pool_name: !exists(json, 'pool_name') ? undefined : json['pool_name'],
    read_only: !exists(json, 'read_only') ? undefined : json['read_only'],
    socks_proxy: !exists(json, 'socks_proxy') ? undefined : json['socks_proxy'],
  };
}

export function LedgerConfigInstanceToJSON(
  value?: LedgerConfigInstance | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    endorser_alias: value.endorser_alias,
    endorser_did: value.endorser_did,
    id: value.id,
    is_production: value.is_production,
    is_write: value.is_write,
    keepalive: value.keepalive,
    pool_name: value.pool_name,
    read_only: value.read_only,
    socks_proxy: value.socks_proxy,
  };
}
