/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CreateDCQLQueryRequest,
  CreateDCQLQueryRequestFromJSON,
  CreateDCQLQueryRequestToJSON,
  CreateDCQLQueryResponse,
  CreateDCQLQueryResponseFromJSON,
  CreateDCQLQueryResponseToJSON,
  CreateOID4VPPresDefRequest,
  CreateOID4VPPresDefRequestFromJSON,
  CreateOID4VPPresDefRequestToJSON,
  CreateOID4VPPresDefResponse,
  CreateOID4VPPresDefResponseFromJSON,
  CreateOID4VPPresDefResponseToJSON,
  CreateOID4VPReqRequest,
  CreateOID4VPReqRequestFromJSON,
  CreateOID4VPReqRequestToJSON,
  CreateOID4VPReqResponse,
  CreateOID4VPReqResponseFromJSON,
  CreateOID4VPReqResponseToJSON,
  DCQLQuery,
  DCQLQueryFromJSON,
  DCQLQueryToJSON,
  DCQLQueryList,
  DCQLQueryListFromJSON,
  DCQLQueryListToJSON,
  GetDCQLQueryResponse,
  GetDCQLQueryResponseFromJSON,
  GetDCQLQueryResponseToJSON,
  GetOID4VPPresResponse,
  GetOID4VPPresResponseFromJSON,
  GetOID4VPPresResponseToJSON,
  OID4VPPresDef,
  OID4VPPresDefFromJSON,
  OID4VPPresDefToJSON,
  OID4VPPresDefList,
  OID4VPPresDefListFromJSON,
  OID4VPPresDefListToJSON,
  OID4VPPresList,
  OID4VPPresListFromJSON,
  OID4VPPresListToJSON,
  OID4VPPresentation,
  OID4VPPresentationFromJSON,
  OID4VPPresentationToJSON,
  OID4VPRequest,
  OID4VPRequestFromJSON,
  OID4VPRequestToJSON,
  OID4VPRequestList,
  OID4VPRequestListFromJSON,
  OID4VPRequestListToJSON,
  UpdateOID4VPPresDefRequest,
  UpdateOID4VPPresDefRequestFromJSON,
  UpdateOID4VPPresDefRequestToJSON,
  UpdateOID4VPPresDefResponse,
  UpdateOID4VPPresDefResponseFromJSON,
  UpdateOID4VPPresDefResponseToJSON,
} from '../models';

export interface Oid4vpDcqlQueriesGetRequest {
  dcqlQueryId?: string;
}

export interface Oid4vpDcqlQueriesHeadRequest {
  dcqlQueryId?: string;
}

export interface Oid4vpDcqlQueriesPostRequest {
  body?: CreateDCQLQueryRequest;
}

export interface Oid4vpDcqlQueryDcqlQueryIdDeleteRequest {
  dcqlQueryId: string;
}

export interface Oid4vpDcqlQueryDcqlQueryIdGetRequest {
  dcqlQueryId: string;
}

export interface Oid4vpDcqlQueryDcqlQueryIdHeadRequest {
  dcqlQueryId: string;
}

export interface Oid4vpPresentationDefinitionPostRequest {
  body?: CreateOID4VPPresDefRequest;
}

export interface Oid4vpPresentationDefinitionPresDefIdDeleteRequest {
  presDefId: string;
}

export interface Oid4vpPresentationDefinitionPresDefIdGetRequest {
  presDefId: string;
}

export interface Oid4vpPresentationDefinitionPresDefIdHeadRequest {
  presDefId: string;
}

export interface Oid4vpPresentationDefinitionPresDefIdPutRequest {
  presDefId: string;
  body?: UpdateOID4VPPresDefRequest;
}

export interface Oid4vpPresentationDefinitionsGetRequest {
  presDefId?: string;
}

export interface Oid4vpPresentationDefinitionsHeadRequest {
  presDefId?: string;
}

export interface Oid4vpPresentationPresentationIdDeleteRequest {
  presentationId: string;
}

export interface Oid4vpPresentationPresentationIdGetRequest {
  presentationId: string;
}

export interface Oid4vpPresentationPresentationIdHeadRequest {
  presentationId: string;
}

export interface Oid4vpPresentationsGetRequest {
  presDefId?: string;
  presentationId?: string;
  state?: Oid4vpPresentationsGetStateEnum;
}

export interface Oid4vpPresentationsHeadRequest {
  presDefId?: string;
  presentationId?: string;
  state?: Oid4vpPresentationsHeadStateEnum;
}

export interface Oid4vpRequestPostRequest {
  body?: CreateOID4VPReqRequest;
}

export interface Oid4vpRequestRequestIdGetRequest {
  requestId: string;
}

export interface Oid4vpRequestRequestIdHeadRequest {
  requestId: string;
}

export interface Oid4vpRequestsGetRequest {
  dcqlQueryId?: string;
  presDefId?: string;
  requestId?: string;
}

export interface Oid4vpRequestsHeadRequest {
  dcqlQueryId?: string;
  presDefId?: string;
  requestId?: string;
}

/**
 *
 */
export class Oid4vpApi extends runtime.BaseAPI {
  /**
   * List all DCQL Query records.
   */
  async oid4vpDcqlQueriesGetRaw(
    requestParameters: Oid4vpDcqlQueriesGetRequest,
  ): Promise<runtime.ApiResponse<DCQLQueryList>> {
    const queryParameters: any = {};

    if (requestParameters.dcqlQueryId !== undefined) {
      queryParameters['dcql_query_id'] = requestParameters.dcqlQueryId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/dcql/queries`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DCQLQueryListFromJSON(jsonValue),
    );
  }

  /**
   * List all DCQL Query records.
   */
  async oid4vpDcqlQueriesGet(
    requestParameters: Oid4vpDcqlQueriesGetRequest,
  ): Promise<DCQLQueryList> {
    const response = await this.oid4vpDcqlQueriesGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * List all DCQL Query records.
   */
  async oid4vpDcqlQueriesHeadRaw(
    requestParameters: Oid4vpDcqlQueriesHeadRequest,
  ): Promise<runtime.ApiResponse<DCQLQueryList>> {
    const queryParameters: any = {};

    if (requestParameters.dcqlQueryId !== undefined) {
      queryParameters['dcql_query_id'] = requestParameters.dcqlQueryId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/dcql/queries`,
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DCQLQueryListFromJSON(jsonValue),
    );
  }

  /**
   * List all DCQL Query records.
   */
  async oid4vpDcqlQueriesHead(
    requestParameters: Oid4vpDcqlQueriesHeadRequest,
  ): Promise<DCQLQueryList> {
    const response = await this.oid4vpDcqlQueriesHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create a DCQL Query record.
   */
  async oid4vpDcqlQueriesPostRaw(
    requestParameters: Oid4vpDcqlQueriesPostRequest,
  ): Promise<runtime.ApiResponse<CreateDCQLQueryResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vp/dcql/queries`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateDCQLQueryRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateDCQLQueryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create a DCQL Query record.
   */
  async oid4vpDcqlQueriesPost(
    requestParameters: Oid4vpDcqlQueriesPostRequest,
  ): Promise<CreateDCQLQueryResponse> {
    const response = await this.oid4vpDcqlQueriesPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Delete DCQL Query.
   */
  async oid4vpDcqlQueryDcqlQueryIdDeleteRaw(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdDeleteRequest,
  ): Promise<runtime.ApiResponse<DCQLQuery>> {
    if (
      requestParameters.dcqlQueryId === null ||
      requestParameters.dcqlQueryId === undefined
    ) {
      throw new runtime.RequiredError(
        'dcqlQueryId',
        'Required parameter requestParameters.dcqlQueryId was null or undefined when calling oid4vpDcqlQueryDcqlQueryIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/dcql/query/{dcql_query_id}`.replace(
        `{${'dcql_query_id'}}`,
        encodeURIComponent(String(requestParameters.dcqlQueryId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DCQLQueryFromJSON(jsonValue),
    );
  }

  /**
   * Delete DCQL Query.
   */
  async oid4vpDcqlQueryDcqlQueryIdDelete(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdDeleteRequest,
  ): Promise<DCQLQuery> {
    const response =
      await this.oid4vpDcqlQueryDcqlQueryIdDeleteRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch DCQL query.
   */
  async oid4vpDcqlQueryDcqlQueryIdGetRaw(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdGetRequest,
  ): Promise<runtime.ApiResponse<GetDCQLQueryResponse>> {
    if (
      requestParameters.dcqlQueryId === null ||
      requestParameters.dcqlQueryId === undefined
    ) {
      throw new runtime.RequiredError(
        'dcqlQueryId',
        'Required parameter requestParameters.dcqlQueryId was null or undefined when calling oid4vpDcqlQueryDcqlQueryIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/dcql/query/{dcql_query_id}`.replace(
        `{${'dcql_query_id'}}`,
        encodeURIComponent(String(requestParameters.dcqlQueryId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetDCQLQueryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Fetch DCQL query.
   */
  async oid4vpDcqlQueryDcqlQueryIdGet(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdGetRequest,
  ): Promise<GetDCQLQueryResponse> {
    const response =
      await this.oid4vpDcqlQueryDcqlQueryIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch DCQL query.
   */
  async oid4vpDcqlQueryDcqlQueryIdHeadRaw(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdHeadRequest,
  ): Promise<runtime.ApiResponse<GetDCQLQueryResponse>> {
    if (
      requestParameters.dcqlQueryId === null ||
      requestParameters.dcqlQueryId === undefined
    ) {
      throw new runtime.RequiredError(
        'dcqlQueryId',
        'Required parameter requestParameters.dcqlQueryId was null or undefined when calling oid4vpDcqlQueryDcqlQueryIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/dcql/query/{dcql_query_id}`.replace(
        `{${'dcql_query_id'}}`,
        encodeURIComponent(String(requestParameters.dcqlQueryId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetDCQLQueryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Fetch DCQL query.
   */
  async oid4vpDcqlQueryDcqlQueryIdHead(
    requestParameters: Oid4vpDcqlQueryDcqlQueryIdHeadRequest,
  ): Promise<GetDCQLQueryResponse> {
    const response =
      await this.oid4vpDcqlQueryDcqlQueryIdHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create an OID4VP Presentation Definition.
   */
  async oid4vpPresentationDefinitionPostRaw(
    requestParameters: Oid4vpPresentationDefinitionPostRequest,
  ): Promise<runtime.ApiResponse<CreateOID4VPPresDefResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vp/presentation-definition`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateOID4VPPresDefRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateOID4VPPresDefResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create an OID4VP Presentation Definition.
   */
  async oid4vpPresentationDefinitionPost(
    requestParameters: Oid4vpPresentationDefinitionPostRequest,
  ): Promise<CreateOID4VPPresDefResponse> {
    const response =
      await this.oid4vpPresentationDefinitionPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationDefinitionPresDefIdDeleteRaw(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdDeleteRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresDef>> {
    if (
      requestParameters.presDefId === null ||
      requestParameters.presDefId === undefined
    ) {
      throw new runtime.RequiredError(
        'presDefId',
        'Required parameter requestParameters.presDefId was null or undefined when calling oid4vpPresentationDefinitionPresDefIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation-definition/{pres_def_id}`.replace(
        `{${'pres_def_id'}}`,
        encodeURIComponent(String(requestParameters.presDefId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresDefFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationDefinitionPresDefIdDelete(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdDeleteRequest,
  ): Promise<OID4VPPresDef> {
    const response =
      await this.oid4vpPresentationDefinitionPresDefIdDeleteRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Fetch presentation definition.
   */
  async oid4vpPresentationDefinitionPresDefIdGetRaw(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdGetRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresDef>> {
    if (
      requestParameters.presDefId === null ||
      requestParameters.presDefId === undefined
    ) {
      throw new runtime.RequiredError(
        'presDefId',
        'Required parameter requestParameters.presDefId was null or undefined when calling oid4vpPresentationDefinitionPresDefIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation-definition/{pres_def_id}`.replace(
        `{${'pres_def_id'}}`,
        encodeURIComponent(String(requestParameters.presDefId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresDefFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation definition.
   */
  async oid4vpPresentationDefinitionPresDefIdGet(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdGetRequest,
  ): Promise<OID4VPPresDef> {
    const response =
      await this.oid4vpPresentationDefinitionPresDefIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation definition.
   */
  async oid4vpPresentationDefinitionPresDefIdHeadRaw(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresDef>> {
    if (
      requestParameters.presDefId === null ||
      requestParameters.presDefId === undefined
    ) {
      throw new runtime.RequiredError(
        'presDefId',
        'Required parameter requestParameters.presDefId was null or undefined when calling oid4vpPresentationDefinitionPresDefIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation-definition/{pres_def_id}`.replace(
        `{${'pres_def_id'}}`,
        encodeURIComponent(String(requestParameters.presDefId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresDefFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation definition.
   */
  async oid4vpPresentationDefinitionPresDefIdHead(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdHeadRequest,
  ): Promise<OID4VPPresDef> {
    const response =
      await this.oid4vpPresentationDefinitionPresDefIdHeadRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Update an OID4VP Presentation Definition.
   */
  async oid4vpPresentationDefinitionPresDefIdPutRaw(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdPutRequest,
  ): Promise<runtime.ApiResponse<UpdateOID4VPPresDefResponse>> {
    if (
      requestParameters.presDefId === null ||
      requestParameters.presDefId === undefined
    ) {
      throw new runtime.RequiredError(
        'presDefId',
        'Required parameter requestParameters.presDefId was null or undefined when calling oid4vpPresentationDefinitionPresDefIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vp/presentation-definition/{pres_def_id}`.replace(
        `{${'pres_def_id'}}`,
        encodeURIComponent(String(requestParameters.presDefId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateOID4VPPresDefRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateOID4VPPresDefResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update an OID4VP Presentation Definition.
   */
  async oid4vpPresentationDefinitionPresDefIdPut(
    requestParameters: Oid4vpPresentationDefinitionPresDefIdPutRequest,
  ): Promise<UpdateOID4VPPresDefResponse> {
    const response =
      await this.oid4vpPresentationDefinitionPresDefIdPutRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all Presentation Definitions.
   */
  async oid4vpPresentationDefinitionsGetRaw(
    requestParameters: Oid4vpPresentationDefinitionsGetRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresDefList>> {
    const queryParameters: any = {};

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation-definitions`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresDefListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all Presentation Definitions.
   */
  async oid4vpPresentationDefinitionsGet(
    requestParameters: Oid4vpPresentationDefinitionsGetRequest,
  ): Promise<OID4VPPresDefList> {
    const response =
      await this.oid4vpPresentationDefinitionsGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all Presentation Definitions.
   */
  async oid4vpPresentationDefinitionsHeadRaw(
    requestParameters: Oid4vpPresentationDefinitionsHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresDefList>> {
    const queryParameters: any = {};

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation-definitions`,
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresDefListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all Presentation Definitions.
   */
  async oid4vpPresentationDefinitionsHead(
    requestParameters: Oid4vpPresentationDefinitionsHeadRequest,
  ): Promise<OID4VPPresDefList> {
    const response =
      await this.oid4vpPresentationDefinitionsHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Delete presentation.
   */
  async oid4vpPresentationPresentationIdDeleteRaw(
    requestParameters: Oid4vpPresentationPresentationIdDeleteRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresentation>> {
    if (
      requestParameters.presentationId === null ||
      requestParameters.presentationId === undefined
    ) {
      throw new runtime.RequiredError(
        'presentationId',
        'Required parameter requestParameters.presentationId was null or undefined when calling oid4vpPresentationPresentationIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation/{presentation_id}`.replace(
        `{${'presentation_id'}}`,
        encodeURIComponent(String(requestParameters.presentationId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresentationFromJSON(jsonValue),
    );
  }

  /**
   * Delete presentation.
   */
  async oid4vpPresentationPresentationIdDelete(
    requestParameters: Oid4vpPresentationPresentationIdDeleteRequest,
  ): Promise<OID4VPPresentation> {
    const response =
      await this.oid4vpPresentationPresentationIdDeleteRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationPresentationIdGetRaw(
    requestParameters: Oid4vpPresentationPresentationIdGetRequest,
  ): Promise<runtime.ApiResponse<GetOID4VPPresResponse>> {
    if (
      requestParameters.presentationId === null ||
      requestParameters.presentationId === undefined
    ) {
      throw new runtime.RequiredError(
        'presentationId',
        'Required parameter requestParameters.presentationId was null or undefined when calling oid4vpPresentationPresentationIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation/{presentation_id}`.replace(
        `{${'presentation_id'}}`,
        encodeURIComponent(String(requestParameters.presentationId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOID4VPPresResponseFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationPresentationIdGet(
    requestParameters: Oid4vpPresentationPresentationIdGetRequest,
  ): Promise<GetOID4VPPresResponse> {
    const response =
      await this.oid4vpPresentationPresentationIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationPresentationIdHeadRaw(
    requestParameters: Oid4vpPresentationPresentationIdHeadRequest,
  ): Promise<runtime.ApiResponse<GetOID4VPPresResponse>> {
    if (
      requestParameters.presentationId === null ||
      requestParameters.presentationId === undefined
    ) {
      throw new runtime.RequiredError(
        'presentationId',
        'Required parameter requestParameters.presentationId was null or undefined when calling oid4vpPresentationPresentationIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentation/{presentation_id}`.replace(
        `{${'presentation_id'}}`,
        encodeURIComponent(String(requestParameters.presentationId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOID4VPPresResponseFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation.
   */
  async oid4vpPresentationPresentationIdHead(
    requestParameters: Oid4vpPresentationPresentationIdHeadRequest,
  ): Promise<GetOID4VPPresResponse> {
    const response =
      await this.oid4vpPresentationPresentationIdHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all Presentations.
   */
  async oid4vpPresentationsGetRaw(
    requestParameters: Oid4vpPresentationsGetRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresList>> {
    const queryParameters: any = {};

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    if (requestParameters.presentationId !== undefined) {
      queryParameters['presentation_id'] = requestParameters.presentationId;
    }

    if (requestParameters.state !== undefined) {
      queryParameters['state'] = requestParameters.state;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all Presentations.
   */
  async oid4vpPresentationsGet(
    requestParameters: Oid4vpPresentationsGetRequest,
  ): Promise<OID4VPPresList> {
    const response = await this.oid4vpPresentationsGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all Presentations.
   */
  async oid4vpPresentationsHeadRaw(
    requestParameters: Oid4vpPresentationsHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VPPresList>> {
    const queryParameters: any = {};

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    if (requestParameters.presentationId !== undefined) {
      queryParameters['presentation_id'] = requestParameters.presentationId;
    }

    if (requestParameters.state !== undefined) {
      queryParameters['state'] = requestParameters.state;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/presentations`,
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPPresListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all Presentations.
   */
  async oid4vpPresentationsHead(
    requestParameters: Oid4vpPresentationsHeadRequest,
  ): Promise<OID4VPPresList> {
    const response = await this.oid4vpPresentationsHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create an OID4VP Request.
   */
  async oid4vpRequestPostRaw(
    requestParameters: Oid4vpRequestPostRequest,
  ): Promise<runtime.ApiResponse<CreateOID4VPReqResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vp/request`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateOID4VPReqRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateOID4VPReqResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create an OID4VP Request.
   */
  async oid4vpRequestPost(
    requestParameters: Oid4vpRequestPostRequest,
  ): Promise<CreateOID4VPReqResponse> {
    const response = await this.oid4vpRequestPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation request.
   */
  async oid4vpRequestRequestIdGetRaw(
    requestParameters: Oid4vpRequestRequestIdGetRequest,
  ): Promise<runtime.ApiResponse<OID4VPRequest>> {
    if (
      requestParameters.requestId === null ||
      requestParameters.requestId === undefined
    ) {
      throw new runtime.RequiredError(
        'requestId',
        'Required parameter requestParameters.requestId was null or undefined when calling oid4vpRequestRequestIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/request/{request_id}`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestParameters.requestId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPRequestFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation request.
   */
  async oid4vpRequestRequestIdGet(
    requestParameters: Oid4vpRequestRequestIdGetRequest,
  ): Promise<OID4VPRequest> {
    const response = await this.oid4vpRequestRequestIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch presentation request.
   */
  async oid4vpRequestRequestIdHeadRaw(
    requestParameters: Oid4vpRequestRequestIdHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VPRequest>> {
    if (
      requestParameters.requestId === null ||
      requestParameters.requestId === undefined
    ) {
      throw new runtime.RequiredError(
        'requestId',
        'Required parameter requestParameters.requestId was null or undefined when calling oid4vpRequestRequestIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/request/{request_id}`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestParameters.requestId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPRequestFromJSON(jsonValue),
    );
  }

  /**
   * Fetch presentation request.
   */
  async oid4vpRequestRequestIdHead(
    requestParameters: Oid4vpRequestRequestIdHeadRequest,
  ): Promise<OID4VPRequest> {
    const response =
      await this.oid4vpRequestRequestIdHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all OID4VP Requests.
   */
  async oid4vpRequestsGetRaw(
    requestParameters: Oid4vpRequestsGetRequest,
  ): Promise<runtime.ApiResponse<OID4VPRequestList>> {
    const queryParameters: any = {};

    if (requestParameters.dcqlQueryId !== undefined) {
      queryParameters['dcql_query_id'] = requestParameters.dcqlQueryId;
    }

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    if (requestParameters.requestId !== undefined) {
      queryParameters['request_id'] = requestParameters.requestId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/requests`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPRequestListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all OID4VP Requests.
   */
  async oid4vpRequestsGet(
    requestParameters: Oid4vpRequestsGetRequest,
  ): Promise<OID4VPRequestList> {
    const response = await this.oid4vpRequestsGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all OID4VP Requests.
   */
  async oid4vpRequestsHeadRaw(
    requestParameters: Oid4vpRequestsHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VPRequestList>> {
    const queryParameters: any = {};

    if (requestParameters.dcqlQueryId !== undefined) {
      queryParameters['dcql_query_id'] = requestParameters.dcqlQueryId;
    }

    if (requestParameters.presDefId !== undefined) {
      queryParameters['pres_def_id'] = requestParameters.presDefId;
    }

    if (requestParameters.requestId !== undefined) {
      queryParameters['request_id'] = requestParameters.requestId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vp/requests`,
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VPRequestListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all OID4VP Requests.
   */
  async oid4vpRequestsHead(
    requestParameters: Oid4vpRequestsHeadRequest,
  ): Promise<OID4VPRequestList> {
    const response = await this.oid4vpRequestsHeadRaw(requestParameters);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum Oid4vpPresentationsGetStateEnum {
  RequestCreated = 'request-created',
  RequestRetrieved = 'request-retrieved',
  PresentationInvalid = 'presentation-invalid',
  PresentationValid = 'presentation-valid',
}
/**
 * @export
 * @enum {string}
 */
export enum Oid4vpPresentationsHeadStateEnum {
  RequestCreated = 'request-created',
  RequestRetrieved = 'request-retrieved',
  PresentationInvalid = 'presentation-invalid',
  PresentationValid = 'presentation-valid',
}
