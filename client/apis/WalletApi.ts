/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.6.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  DIDCreate,
  DIDCreateFromJSON,
  DIDCreateToJSON,
  DIDEndpoint,
  DIDEndpointFromJSON,
  DIDEndpointToJSON,
  DIDEndpointWithType,
  DIDEndpointWithTypeFromJSON,
  DIDEndpointWithTypeToJSON,
  DIDList,
  DIDListFromJSON,
  DIDListToJSON,
  DIDResult,
  DIDResultFromJSON,
  DIDResultToJSON,
} from '../models';

export interface WalletDidCreatePostRequest {
  body?: DIDCreate;
}

export interface WalletDidGetRequest {
  did?: string;
  keyType?: WalletDidGetKeyTypeEnum;
  method?: WalletDidGetMethodEnum;
  posture?: WalletDidGetPostureEnum;
  verkey?: string;
}

export interface WalletDidLocalRotateKeypairPatchRequest {
  did: string;
}

export interface WalletDidPublicPostRequest {
  did: string;
  connId?: string;
  createTransactionForEndorser?: boolean;
  mediationId?: string;
}

export interface WalletGetDidEndpointGetRequest {
  did: string;
}

export interface WalletSetDidEndpointPostRequest {
  connId?: string;
  createTransactionForEndorser?: boolean;
  body?: DIDEndpointWithType;
}

/**
 *
 */
export class WalletApi extends runtime.BaseAPI {
  /**
   * Create a local DID
   */
  async walletDidCreatePostRaw(
    requestParameters: WalletDidCreatePostRequest,
  ): Promise<runtime.ApiResponse<DIDResult>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/wallet/did/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DIDCreateToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DIDResultFromJSON(jsonValue),
    );
  }

  /**
   * Create a local DID
   */
  async walletDidCreatePost(
    requestParameters: WalletDidCreatePostRequest,
  ): Promise<DIDResult> {
    const response = await this.walletDidCreatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * List wallet DIDs
   */
  async walletDidGetRaw(
    requestParameters: WalletDidGetRequest,
  ): Promise<runtime.ApiResponse<DIDList>> {
    const queryParameters: any = {};

    if (requestParameters.did !== undefined) {
      queryParameters['did'] = requestParameters.did;
    }

    if (requestParameters.keyType !== undefined) {
      queryParameters['key_type'] = requestParameters.keyType;
    }

    if (requestParameters.method !== undefined) {
      queryParameters['method'] = requestParameters.method;
    }

    if (requestParameters.posture !== undefined) {
      queryParameters['posture'] = requestParameters.posture;
    }

    if (requestParameters.verkey !== undefined) {
      queryParameters['verkey'] = requestParameters.verkey;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/wallet/did`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DIDListFromJSON(jsonValue),
    );
  }

  /**
   * List wallet DIDs
   */
  async walletDidGet(requestParameters: WalletDidGetRequest): Promise<DIDList> {
    const response = await this.walletDidGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Rotate keypair for a DID not posted to the ledger
   */
  async walletDidLocalRotateKeypairPatchRaw(
    requestParameters: WalletDidLocalRotateKeypairPatchRequest,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.did === null || requestParameters.did === undefined) {
      throw new runtime.RequiredError(
        'did',
        'Required parameter requestParameters.did was null or undefined when calling walletDidLocalRotateKeypairPatch.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.did !== undefined) {
      queryParameters['did'] = requestParameters.did;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/wallet/did/local/rotate-keypair`,
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Rotate keypair for a DID not posted to the ledger
   */
  async walletDidLocalRotateKeypairPatch(
    requestParameters: WalletDidLocalRotateKeypairPatchRequest,
  ): Promise<object> {
    const response = await this.walletDidLocalRotateKeypairPatchRaw(
      requestParameters,
    );
    return await response.value();
  }

  /**
   * Fetch the current public DID
   */
  async walletDidPublicGetRaw(): Promise<runtime.ApiResponse<DIDResult>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/wallet/did/public`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DIDResultFromJSON(jsonValue),
    );
  }

  /**
   * Fetch the current public DID
   */
  async walletDidPublicGet(): Promise<DIDResult> {
    const response = await this.walletDidPublicGetRaw();
    return await response.value();
  }

  /**
   * Assign the current public DID
   */
  async walletDidPublicPostRaw(
    requestParameters: WalletDidPublicPostRequest,
  ): Promise<runtime.ApiResponse<DIDResult>> {
    if (requestParameters.did === null || requestParameters.did === undefined) {
      throw new runtime.RequiredError(
        'did',
        'Required parameter requestParameters.did was null or undefined when calling walletDidPublicPost.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.did !== undefined) {
      queryParameters['did'] = requestParameters.did;
    }

    if (requestParameters.connId !== undefined) {
      queryParameters['conn_id'] = requestParameters.connId;
    }

    if (requestParameters.createTransactionForEndorser !== undefined) {
      queryParameters['create_transaction_for_endorser'] =
        requestParameters.createTransactionForEndorser;
    }

    if (requestParameters.mediationId !== undefined) {
      queryParameters['mediation_id'] = requestParameters.mediationId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/wallet/did/public`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DIDResultFromJSON(jsonValue),
    );
  }

  /**
   * Assign the current public DID
   */
  async walletDidPublicPost(
    requestParameters: WalletDidPublicPostRequest,
  ): Promise<DIDResult> {
    const response = await this.walletDidPublicPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Query DID endpoint in wallet
   */
  async walletGetDidEndpointGetRaw(
    requestParameters: WalletGetDidEndpointGetRequest,
  ): Promise<runtime.ApiResponse<DIDEndpoint>> {
    if (requestParameters.did === null || requestParameters.did === undefined) {
      throw new runtime.RequiredError(
        'did',
        'Required parameter requestParameters.did was null or undefined when calling walletGetDidEndpointGet.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.did !== undefined) {
      queryParameters['did'] = requestParameters.did;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/wallet/get-did-endpoint`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DIDEndpointFromJSON(jsonValue),
    );
  }

  /**
   * Query DID endpoint in wallet
   */
  async walletGetDidEndpointGet(
    requestParameters: WalletGetDidEndpointGetRequest,
  ): Promise<DIDEndpoint> {
    const response = await this.walletGetDidEndpointGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update endpoint in wallet and on ledger if posted to it
   */
  async walletSetDidEndpointPostRaw(
    requestParameters: WalletSetDidEndpointPostRequest,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    if (requestParameters.connId !== undefined) {
      queryParameters['conn_id'] = requestParameters.connId;
    }

    if (requestParameters.createTransactionForEndorser !== undefined) {
      queryParameters['create_transaction_for_endorser'] =
        requestParameters.createTransactionForEndorser;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/wallet/set-did-endpoint`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DIDEndpointWithTypeToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Update endpoint in wallet and on ledger if posted to it
   */
  async walletSetDidEndpointPost(
    requestParameters: WalletSetDidEndpointPostRequest,
  ): Promise<object> {
    const response = await this.walletSetDidEndpointPostRaw(requestParameters);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum WalletDidGetKeyTypeEnum {
  Ed25519 = 'ed25519',
  Bls12381g2 = 'bls12381g2',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletDidGetMethodEnum {
  Key = 'key',
  Sov = 'sov',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletDidGetPostureEnum {
  Public = 'public',
  Posted = 'posted',
  WalletOnly = 'wallet_only',
}
