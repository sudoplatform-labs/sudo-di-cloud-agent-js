/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v100.0.100
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface AnoncredsWalletUpgradePostRequest {
  walletName: string;
}

/**
 *
 */
export class AnoncredsWalletUpgradeApi extends runtime.BaseAPI {
  /**
   *          Upgrade the wallet from askar to anoncreds - Be very careful with this! You          cannot go back! See migration guide for more information.
   */
  async anoncredsWalletUpgradePostRaw(
    requestParameters: AnoncredsWalletUpgradePostRequest,
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.walletName === null ||
      requestParameters.walletName === undefined
    ) {
      throw new runtime.RequiredError(
        'walletName',
        'Required parameter requestParameters.walletName was null or undefined when calling anoncredsWalletUpgradePost.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.walletName !== undefined) {
      queryParameters['wallet_name'] = requestParameters.walletName;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/anoncreds/wallet/upgrade`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   *          Upgrade the wallet from askar to anoncreds - Be very careful with this! You          cannot go back! See migration guide for more information.
   */
  async anoncredsWalletUpgradePost(
    requestParameters: AnoncredsWalletUpgradePostRequest,
  ): Promise<object> {
    const response = await this.anoncredsWalletUpgradePostRaw(
      requestParameters,
    );
    return await response.value();
  }
}
