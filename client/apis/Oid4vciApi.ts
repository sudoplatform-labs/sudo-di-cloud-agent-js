/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CredOfferResponseSchemaRef,
  CredOfferResponseSchemaRefFromJSON,
  CredOfferResponseSchemaRefToJSON,
  CredOfferResponseSchemaVal,
  CredOfferResponseSchemaValFromJSON,
  CredOfferResponseSchemaValToJSON,
  ExchangeRecordCreateRequest,
  ExchangeRecordCreateRequestFromJSON,
  ExchangeRecordCreateRequestToJSON,
  ExchangeRecordList,
  ExchangeRecordListFromJSON,
  ExchangeRecordListToJSON,
  JwtSupportedCredCreateRequest,
  JwtSupportedCredCreateRequestFromJSON,
  JwtSupportedCredCreateRequestToJSON,
  OID4VCIExchangeRecord,
  OID4VCIExchangeRecordFromJSON,
  OID4VCIExchangeRecordToJSON,
  SdJwtSupportedCredCreateReq,
  SdJwtSupportedCredCreateReqFromJSON,
  SdJwtSupportedCredCreateReqToJSON,
  SupportedCredCreateRequest,
  SupportedCredCreateRequestFromJSON,
  SupportedCredCreateRequestToJSON,
  SupportedCredential,
  SupportedCredentialFromJSON,
  SupportedCredentialToJSON,
  SupportedCredentialList,
  SupportedCredentialListFromJSON,
  SupportedCredentialListToJSON,
} from '../models';

export interface Oid4vciCredentialOfferByRefGetRequest {
  exchangeId?: string;
  userPinRequired?: boolean;
}

export interface Oid4vciCredentialOfferGetRequest {
  exchangeId?: string;
  userPinRequired?: boolean;
}

export interface Oid4vciCredentialSupportedCreateJwtPostRequest {
  body?: JwtSupportedCredCreateRequest;
}

export interface Oid4vciCredentialSupportedCreatePostRequest {
  body?: SupportedCredCreateRequest;
}

export interface Oid4vciCredentialSupportedCreateSdJwtPostRequest {
  body?: SdJwtSupportedCredCreateReq;
}

export interface Oid4vciCredentialSupportedRecordsGetRequest {
  format?: string;
  supportedCredId?: string;
}

export interface Oid4vciCredentialSupportedRecordsJwtSupportedCredIdDeleteRequest {
  supportedCredId: string;
}

export interface Oid4vciCredentialSupportedRecordsJwtSupportedCredIdPutRequest {
  supportedCredId: string;
  body?: JwtSupportedCredCreateRequest;
}

export interface Oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPutRequest {
  supportedCredId: string;
  body?: SdJwtSupportedCredCreateReq;
}

export interface Oid4vciCredentialSupportedRecordsSupportedCredIdGetRequest {
  supportedCredId: string;
}

export interface Oid4vciCredentialSupportedRecordsSupportedCredIdHeadRequest {
  supportedCredId: string;
}

export interface Oid4vciExchangeCreatePostRequest {
  body?: ExchangeRecordCreateRequest;
}

export interface Oid4vciExchangeRecordsExchangeIdDeleteRequest {
  exchangeId: string;
}

export interface Oid4vciExchangeRecordsExchangeIdGetRequest {
  exchangeId: string;
}

export interface Oid4vciExchangeRecordsExchangeIdHeadRequest {
  exchangeId: string;
}

export interface Oid4vciExchangeRecordsGetRequest {
  exchangeId?: string;
  state?: Oid4vciExchangeRecordsGetStateEnum;
  supportedCredId?: string;
}

/**
 *
 */
export class Oid4vciApi extends runtime.BaseAPI {
  /**
   * Get a credential offer by reference
   */
  async oid4vciCredentialOfferByRefGetRaw(
    requestParameters: Oid4vciCredentialOfferByRefGetRequest,
  ): Promise<runtime.ApiResponse<CredOfferResponseSchemaRef>> {
    const queryParameters: any = {};

    if (requestParameters.exchangeId !== undefined) {
      queryParameters['exchange_id'] = requestParameters.exchangeId;
    }

    if (requestParameters.userPinRequired !== undefined) {
      queryParameters['user_pin_required'] = requestParameters.userPinRequired;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-offer-by-ref`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CredOfferResponseSchemaRefFromJSON(jsonValue),
    );
  }

  /**
   * Get a credential offer by reference
   */
  async oid4vciCredentialOfferByRefGet(
    requestParameters: Oid4vciCredentialOfferByRefGetRequest,
  ): Promise<CredOfferResponseSchemaRef> {
    const response =
      await this.oid4vciCredentialOfferByRefGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Get a credential offer by value
   */
  async oid4vciCredentialOfferGetRaw(
    requestParameters: Oid4vciCredentialOfferGetRequest,
  ): Promise<runtime.ApiResponse<CredOfferResponseSchemaVal>> {
    const queryParameters: any = {};

    if (requestParameters.exchangeId !== undefined) {
      queryParameters['exchange_id'] = requestParameters.exchangeId;
    }

    if (requestParameters.userPinRequired !== undefined) {
      queryParameters['user_pin_required'] = requestParameters.userPinRequired;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-offer`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CredOfferResponseSchemaValFromJSON(jsonValue),
    );
  }

  /**
   * Get a credential offer by value
   */
  async oid4vciCredentialOfferGet(
    requestParameters: Oid4vciCredentialOfferGetRequest,
  ): Promise<CredOfferResponseSchemaVal> {
    const response = await this.oid4vciCredentialOfferGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Register a configuration for a supported JWT VC credential
   */
  async oid4vciCredentialSupportedCreateJwtPostRaw(
    requestParameters: Oid4vciCredentialSupportedCreateJwtPostRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/credential-supported/create/jwt`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: JwtSupportedCredCreateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Register a configuration for a supported JWT VC credential
   */
  async oid4vciCredentialSupportedCreateJwtPost(
    requestParameters: Oid4vciCredentialSupportedCreateJwtPostRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedCreateJwtPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Register a Oid4vci credential
   */
  async oid4vciCredentialSupportedCreatePostRaw(
    requestParameters: Oid4vciCredentialSupportedCreatePostRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/credential-supported/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: SupportedCredCreateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Register a Oid4vci credential
   */
  async oid4vciCredentialSupportedCreatePost(
    requestParameters: Oid4vciCredentialSupportedCreatePostRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedCreatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   *  This endpoint feeds into the Credential Issuer Metadata reported by the Issuer to its clients.  See the SD-JWT VC profile for more details on these properties: https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-ID1.html#name-credential-issuer-metadata-6
   * Register a configuration for a supported SD-JWT VC credential
   */
  async oid4vciCredentialSupportedCreateSdJwtPostRaw(
    requestParameters: Oid4vciCredentialSupportedCreateSdJwtPostRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/credential-supported/create/sd-jwt`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: SdJwtSupportedCredCreateReqToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   *  This endpoint feeds into the Credential Issuer Metadata reported by the Issuer to its clients.  See the SD-JWT VC profile for more details on these properties: https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-ID1.html#name-credential-issuer-metadata-6
   * Register a configuration for a supported SD-JWT VC credential
   */
  async oid4vciCredentialSupportedCreateSdJwtPost(
    requestParameters: Oid4vciCredentialSupportedCreateSdJwtPostRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedCreateSdJwtPostRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Fetch all credential supported records
   */
  async oid4vciCredentialSupportedRecordsGetRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsGetRequest,
  ): Promise<runtime.ApiResponse<SupportedCredentialList>> {
    const queryParameters: any = {};

    if (requestParameters.format !== undefined) {
      queryParameters['format'] = requestParameters.format;
    }

    if (requestParameters.supportedCredId !== undefined) {
      queryParameters['supported_cred_id'] = requestParameters.supportedCredId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-supported/records`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all credential supported records
   */
  async oid4vciCredentialSupportedRecordsGet(
    requestParameters: Oid4vciCredentialSupportedRecordsGetRequest,
  ): Promise<SupportedCredentialList> {
    const response =
      await this.oid4vciCredentialSupportedRecordsGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Remove an existing credential supported record
   */
  async oid4vciCredentialSupportedRecordsJwtSupportedCredIdDeleteRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsJwtSupportedCredIdDeleteRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling oid4vciCredentialSupportedRecordsJwtSupportedCredIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-supported/records/jwt/{supported_cred_id}`.replace(
        `{${'supported_cred_id'}}`,
        encodeURIComponent(String(requestParameters.supportedCredId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Remove an existing credential supported record
   */
  async oid4vciCredentialSupportedRecordsJwtSupportedCredIdDelete(
    requestParameters: Oid4vciCredentialSupportedRecordsJwtSupportedCredIdDeleteRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedRecordsJwtSupportedCredIdDeleteRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Update a Supported Credential. Expected to be a complete replacement of a JWT Supported Credential record, i.e., optional values that aren\'t supplied will be `None`, rather than retaining their original value.
   */
  async oid4vciCredentialSupportedRecordsJwtSupportedCredIdPutRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsJwtSupportedCredIdPutRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling oid4vciCredentialSupportedRecordsJwtSupportedCredIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/credential-supported/records/jwt/{supported_cred_id}`.replace(
        `{${'supported_cred_id'}}`,
        encodeURIComponent(String(requestParameters.supportedCredId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: JwtSupportedCredCreateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Update a Supported Credential. Expected to be a complete replacement of a JWT Supported Credential record, i.e., optional values that aren\'t supplied will be `None`, rather than retaining their original value.
   */
  async oid4vciCredentialSupportedRecordsJwtSupportedCredIdPut(
    requestParameters: Oid4vciCredentialSupportedRecordsJwtSupportedCredIdPutRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedRecordsJwtSupportedCredIdPutRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Update a Supported Credential. Expected to be a complete replacement of an SD JWT Supported Credential record, i.e., optional values that aren\'t supplied will be `None`, rather than retaining their original value.
   */
  async oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPutRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPutRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/credential-supported/records/sd-jwt/{supported_cred_id}`.replace(
        `{${'supported_cred_id'}}`,
        encodeURIComponent(String(requestParameters.supportedCredId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: SdJwtSupportedCredCreateReqToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Update a Supported Credential. Expected to be a complete replacement of an SD JWT Supported Credential record, i.e., optional values that aren\'t supplied will be `None`, rather than retaining their original value.
   */
  async oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPut(
    requestParameters: Oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPutRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedRecordsSdJwtSupportedCredIdPutRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Get a credential supported record by ID
   */
  async oid4vciCredentialSupportedRecordsSupportedCredIdGetRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsSupportedCredIdGetRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling oid4vciCredentialSupportedRecordsSupportedCredIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-supported/records/{supported_cred_id}`.replace(
        `{${'supported_cred_id'}}`,
        encodeURIComponent(String(requestParameters.supportedCredId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Get a credential supported record by ID
   */
  async oid4vciCredentialSupportedRecordsSupportedCredIdGet(
    requestParameters: Oid4vciCredentialSupportedRecordsSupportedCredIdGetRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedRecordsSupportedCredIdGetRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Get a credential supported record by ID
   */
  async oid4vciCredentialSupportedRecordsSupportedCredIdHeadRaw(
    requestParameters: Oid4vciCredentialSupportedRecordsSupportedCredIdHeadRequest,
  ): Promise<runtime.ApiResponse<SupportedCredential>> {
    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling oid4vciCredentialSupportedRecordsSupportedCredIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/credential-supported/records/{supported_cred_id}`.replace(
        `{${'supported_cred_id'}}`,
        encodeURIComponent(String(requestParameters.supportedCredId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupportedCredentialFromJSON(jsonValue),
    );
  }

  /**
   * Get a credential supported record by ID
   */
  async oid4vciCredentialSupportedRecordsSupportedCredIdHead(
    requestParameters: Oid4vciCredentialSupportedRecordsSupportedCredIdHeadRequest,
  ): Promise<SupportedCredential> {
    const response =
      await this.oid4vciCredentialSupportedRecordsSupportedCredIdHeadRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Create a credential exchange record
   */
  async oid4vciExchangeCreatePostRaw(
    requestParameters: Oid4vciExchangeCreatePostRequest,
  ): Promise<runtime.ApiResponse<OID4VCIExchangeRecord>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/oid4vci/exchange/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ExchangeRecordCreateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VCIExchangeRecordFromJSON(jsonValue),
    );
  }

  /**
   * Create a credential exchange record
   */
  async oid4vciExchangeCreatePost(
    requestParameters: Oid4vciExchangeCreatePostRequest,
  ): Promise<OID4VCIExchangeRecord> {
    const response = await this.oid4vciExchangeCreatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Remove an existing exchange record
   */
  async oid4vciExchangeRecordsExchangeIdDeleteRaw(
    requestParameters: Oid4vciExchangeRecordsExchangeIdDeleteRequest,
  ): Promise<runtime.ApiResponse<OID4VCIExchangeRecord>> {
    if (
      requestParameters.exchangeId === null ||
      requestParameters.exchangeId === undefined
    ) {
      throw new runtime.RequiredError(
        'exchangeId',
        'Required parameter requestParameters.exchangeId was null or undefined when calling oid4vciExchangeRecordsExchangeIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/exchange/records/{exchange_id}`.replace(
        `{${'exchange_id'}}`,
        encodeURIComponent(String(requestParameters.exchangeId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VCIExchangeRecordFromJSON(jsonValue),
    );
  }

  /**
   * Remove an existing exchange record
   */
  async oid4vciExchangeRecordsExchangeIdDelete(
    requestParameters: Oid4vciExchangeRecordsExchangeIdDeleteRequest,
  ): Promise<OID4VCIExchangeRecord> {
    const response =
      await this.oid4vciExchangeRecordsExchangeIdDeleteRaw(requestParameters);
    return await response.value();
  }

  /**
   * Retrieve an exchange record by ID
   */
  async oid4vciExchangeRecordsExchangeIdGetRaw(
    requestParameters: Oid4vciExchangeRecordsExchangeIdGetRequest,
  ): Promise<runtime.ApiResponse<OID4VCIExchangeRecord>> {
    if (
      requestParameters.exchangeId === null ||
      requestParameters.exchangeId === undefined
    ) {
      throw new runtime.RequiredError(
        'exchangeId',
        'Required parameter requestParameters.exchangeId was null or undefined when calling oid4vciExchangeRecordsExchangeIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/exchange/records/{exchange_id}`.replace(
        `{${'exchange_id'}}`,
        encodeURIComponent(String(requestParameters.exchangeId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VCIExchangeRecordFromJSON(jsonValue),
    );
  }

  /**
   * Retrieve an exchange record by ID
   */
  async oid4vciExchangeRecordsExchangeIdGet(
    requestParameters: Oid4vciExchangeRecordsExchangeIdGetRequest,
  ): Promise<OID4VCIExchangeRecord> {
    const response =
      await this.oid4vciExchangeRecordsExchangeIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Retrieve an exchange record by ID
   */
  async oid4vciExchangeRecordsExchangeIdHeadRaw(
    requestParameters: Oid4vciExchangeRecordsExchangeIdHeadRequest,
  ): Promise<runtime.ApiResponse<OID4VCIExchangeRecord>> {
    if (
      requestParameters.exchangeId === null ||
      requestParameters.exchangeId === undefined
    ) {
      throw new runtime.RequiredError(
        'exchangeId',
        'Required parameter requestParameters.exchangeId was null or undefined when calling oid4vciExchangeRecordsExchangeIdHead.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/exchange/records/{exchange_id}`.replace(
        `{${'exchange_id'}}`,
        encodeURIComponent(String(requestParameters.exchangeId)),
      ),
      method: 'HEAD',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OID4VCIExchangeRecordFromJSON(jsonValue),
    );
  }

  /**
   * Retrieve an exchange record by ID
   */
  async oid4vciExchangeRecordsExchangeIdHead(
    requestParameters: Oid4vciExchangeRecordsExchangeIdHeadRequest,
  ): Promise<OID4VCIExchangeRecord> {
    const response =
      await this.oid4vciExchangeRecordsExchangeIdHeadRaw(requestParameters);
    return await response.value();
  }

  /**
   * Fetch all credential exchange records
   */
  async oid4vciExchangeRecordsGetRaw(
    requestParameters: Oid4vciExchangeRecordsGetRequest,
  ): Promise<runtime.ApiResponse<ExchangeRecordList>> {
    const queryParameters: any = {};

    if (requestParameters.exchangeId !== undefined) {
      queryParameters['exchange_id'] = requestParameters.exchangeId;
    }

    if (requestParameters.state !== undefined) {
      queryParameters['state'] = requestParameters.state;
    }

    if (requestParameters.supportedCredId !== undefined) {
      queryParameters['supported_cred_id'] = requestParameters.supportedCredId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/oid4vci/exchange/records`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExchangeRecordListFromJSON(jsonValue),
    );
  }

  /**
   * Fetch all credential exchange records
   */
  async oid4vciExchangeRecordsGet(
    requestParameters: Oid4vciExchangeRecordsGetRequest,
  ): Promise<ExchangeRecordList> {
    const response = await this.oid4vciExchangeRecordsGetRaw(requestParameters);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum Oid4vciExchangeRecordsGetStateEnum {
  Created = 'created',
  Offer = 'offer',
  Issued = 'issued',
  Failed = 'failed',
}
