/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CreateDIDJWKRequest,
  CreateDIDJWKRequestFromJSON,
  CreateDIDJWKRequestToJSON,
  CreateDIDJWKResponse,
  CreateDIDJWKResponseFromJSON,
  CreateDIDJWKResponseToJSON,
  CreateRequest,
  CreateRequestFromJSON,
  CreateRequestToJSON,
  CreateResponse,
  CreateResponseFromJSON,
  CreateResponseToJSON,
  DeactivateRequest,
  DeactivateRequestFromJSON,
  DeactivateRequestToJSON,
  DeactivateResponse,
  DeactivateResponseFromJSON,
  DeactivateResponseToJSON,
  UpdateRequest,
  UpdateRequestFromJSON,
  UpdateRequestToJSON,
  UpdateResponse,
  UpdateResponseFromJSON,
  UpdateResponseToJSON,
} from '../models';

export interface DidCheqdCreatePostRequest {
  body?: CreateRequest;
}

export interface DidCheqdDeactivatePostRequest {
  body?: DeactivateRequest;
}

export interface DidCheqdUpdatePostRequest {
  body?: UpdateRequest;
}

export interface DidJwkCreatePostRequest {
  body?: CreateDIDJWKRequest;
}

/**
 *
 */
export class DidApi extends runtime.BaseAPI {
  /**
   * Create a did:cheqd
   */
  async didCheqdCreatePostRaw(
    requestParameters: DidCheqdCreatePostRequest,
  ): Promise<runtime.ApiResponse<CreateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/did/cheqd/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create a did:cheqd
   */
  async didCheqdCreatePost(
    requestParameters: DidCheqdCreatePostRequest,
  ): Promise<CreateResponse> {
    const response = await this.didCheqdCreatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Deactivate a did:cheqd
   */
  async didCheqdDeactivatePostRaw(
    requestParameters: DidCheqdDeactivatePostRequest,
  ): Promise<runtime.ApiResponse<DeactivateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/did/cheqd/deactivate`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DeactivateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeactivateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Deactivate a did:cheqd
   */
  async didCheqdDeactivatePost(
    requestParameters: DidCheqdDeactivatePostRequest,
  ): Promise<DeactivateResponse> {
    const response = await this.didCheqdDeactivatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update a did:cheqd
   */
  async didCheqdUpdatePostRaw(
    requestParameters: DidCheqdUpdatePostRequest,
  ): Promise<runtime.ApiResponse<UpdateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/did/cheqd/update`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update a did:cheqd
   */
  async didCheqdUpdatePost(
    requestParameters: DidCheqdUpdatePostRequest,
  ): Promise<UpdateResponse> {
    const response = await this.didCheqdUpdatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create DID JWK.
   */
  async didJwkCreatePostRaw(
    requestParameters: DidJwkCreatePostRequest,
  ): Promise<runtime.ApiResponse<CreateDIDJWKResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/did/jwk/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateDIDJWKRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateDIDJWKResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create DID JWK.
   */
  async didJwkCreatePost(
    requestParameters: DidJwkCreatePostRequest,
  ): Promise<CreateDIDJWKResponse> {
    const response = await this.didJwkCreatePostRaw(requestParameters);
    return await response.value();
  }
}
