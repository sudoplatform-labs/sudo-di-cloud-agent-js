/**
 * Sudo Decentralized Identity Cloud Agent SDK
 * Provides REST API wrappers for Typescript Agent Controllers using the Sudo Decentralized Identity Cloud Agent Service
 *
 * The version of the OpenAPI document: v0.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  AssignStatusListEntryResponse,
  AssignStatusListEntryResponseFromJSON,
  AssignStatusListEntryResponseToJSON,
  CreateStatusListDefRequest,
  CreateStatusListDefRequestFromJSON,
  CreateStatusListDefRequestToJSON,
  DeleteStatusListDefRequest,
  DeleteStatusListDefRequestFromJSON,
  DeleteStatusListDefRequestToJSON,
  DeleteStatusListDefResponse,
  DeleteStatusListDefResponseFromJSON,
  DeleteStatusListDefResponseToJSON,
  PublishStatusListResponse,
  PublishStatusListResponseFromJSON,
  PublishStatusListResponseToJSON,
  QueryStatusListDefResponse,
  QueryStatusListDefResponseFromJSON,
  QueryStatusListDefResponseToJSON,
  StatusList,
  StatusListFromJSON,
  StatusListToJSON,
  StatusListCred,
  StatusListCredFromJSON,
  StatusListCredToJSON,
  StatusListDef,
  StatusListDefFromJSON,
  StatusListDefToJSON,
  UpdateStatusListCredRequest,
  UpdateStatusListCredRequestFromJSON,
  UpdateStatusListCredRequestToJSON,
  UpdateStatusListDefRequest,
  UpdateStatusListDefRequestFromJSON,
  UpdateStatusListDefRequestToJSON,
} from '../models';

export interface StatusListAssignSupportedCredIdCredsCredIdPostRequest {
  credId: string;
  supportedCredId: string;
}

export interface StatusListDefsDefIdCredsCredIdGetRequest {
  credId: string;
  defId: string;
}

export interface StatusListDefsDefIdCredsCredIdPatchRequest {
  credId: string;
  defId: string;
  body?: UpdateStatusListCredRequest;
}

export interface StatusListDefsDefIdDeleteRequest {
  defId: string;
  body?: DeleteStatusListDefRequest;
}

export interface StatusListDefsDefIdEntriesPostRequest {
  defId: string;
}

export interface StatusListDefsDefIdGetRequest {
  defId: string;
}

export interface StatusListDefsDefIdListsListNumGetRequest {
  defId: string;
  listNum: string;
  issuerDid?: string;
}

export interface StatusListDefsDefIdPatchRequest {
  defId: string;
  body?: UpdateStatusListDefRequest;
}

export interface StatusListDefsDefIdPublishPutRequest {
  defId: string;
}

export interface StatusListDefsGetRequest {
  statusPurpose?: StatusListDefsGetStatusPurposeEnum;
  supportedCredId?: string;
}

export interface StatusListDefsPostRequest {
  body?: CreateStatusListDefRequest;
}

/**
 *
 */
export class StatusListApi extends runtime.BaseAPI {
  /**
   * Bind a credential to a status list entry (ideally, this should be automated)
   */
  async statusListAssignSupportedCredIdCredsCredIdPostRaw(
    requestParameters: StatusListAssignSupportedCredIdCredsCredIdPostRequest,
  ): Promise<runtime.ApiResponse<StatusListCred>> {
    if (
      requestParameters.credId === null ||
      requestParameters.credId === undefined
    ) {
      throw new runtime.RequiredError(
        'credId',
        'Required parameter requestParameters.credId was null or undefined when calling statusListAssignSupportedCredIdCredsCredIdPost.',
      );
    }

    if (
      requestParameters.supportedCredId === null ||
      requestParameters.supportedCredId === undefined
    ) {
      throw new runtime.RequiredError(
        'supportedCredId',
        'Required parameter requestParameters.supportedCredId was null or undefined when calling statusListAssignSupportedCredIdCredsCredIdPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/assign/{supported_cred_id}/creds/{cred_id}`
        .replace(
          `{${'cred_id'}}`,
          encodeURIComponent(String(requestParameters.credId)),
        )
        .replace(
          `{${'supported_cred_id'}}`,
          encodeURIComponent(String(requestParameters.supportedCredId)),
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListCredFromJSON(jsonValue),
    );
  }

  /**
   * Bind a credential to a status list entry (ideally, this should be automated)
   */
  async statusListAssignSupportedCredIdCredsCredIdPost(
    requestParameters: StatusListAssignSupportedCredIdCredsCredIdPostRequest,
  ): Promise<StatusListCred> {
    const response =
      await this.statusListAssignSupportedCredIdCredsCredIdPostRaw(
        requestParameters,
      );
    return await response.value();
  }

  /**
   * Search status list credential by definition and credential identifiers
   */
  async statusListDefsDefIdCredsCredIdGetRaw(
    requestParameters: StatusListDefsDefIdCredsCredIdGetRequest,
  ): Promise<runtime.ApiResponse<StatusListCred>> {
    if (
      requestParameters.credId === null ||
      requestParameters.credId === undefined
    ) {
      throw new runtime.RequiredError(
        'credId',
        'Required parameter requestParameters.credId was null or undefined when calling statusListDefsDefIdCredsCredIdGet.',
      );
    }

    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdCredsCredIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs/{def_id}/creds/{cred_id}`
        .replace(
          `{${'cred_id'}}`,
          encodeURIComponent(String(requestParameters.credId)),
        )
        .replace(
          `{${'def_id'}}`,
          encodeURIComponent(String(requestParameters.defId)),
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListCredFromJSON(jsonValue),
    );
  }

  /**
   * Search status list credential by definition and credential identifiers
   */
  async statusListDefsDefIdCredsCredIdGet(
    requestParameters: StatusListDefsDefIdCredsCredIdGetRequest,
  ): Promise<StatusListCred> {
    const response =
      await this.statusListDefsDefIdCredsCredIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update status list entry by list number and entry index
   */
  async statusListDefsDefIdCredsCredIdPatchRaw(
    requestParameters: StatusListDefsDefIdCredsCredIdPatchRequest,
  ): Promise<runtime.ApiResponse<StatusListCred>> {
    if (
      requestParameters.credId === null ||
      requestParameters.credId === undefined
    ) {
      throw new runtime.RequiredError(
        'credId',
        'Required parameter requestParameters.credId was null or undefined when calling statusListDefsDefIdCredsCredIdPatch.',
      );
    }

    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdCredsCredIdPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/status-list/defs/{def_id}/creds/{cred_id}`
        .replace(
          `{${'cred_id'}}`,
          encodeURIComponent(String(requestParameters.credId)),
        )
        .replace(
          `{${'def_id'}}`,
          encodeURIComponent(String(requestParameters.defId)),
        ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateStatusListCredRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListCredFromJSON(jsonValue),
    );
  }

  /**
   * Update status list entry by list number and entry index
   */
  async statusListDefsDefIdCredsCredIdPatch(
    requestParameters: StatusListDefsDefIdCredsCredIdPatchRequest,
  ): Promise<StatusListCred> {
    const response =
      await this.statusListDefsDefIdCredsCredIdPatchRaw(requestParameters);
    return await response.value();
  }

  /**
   * Delete a status list definition by identifier
   */
  async statusListDefsDefIdDeleteRaw(
    requestParameters: StatusListDefsDefIdDeleteRequest,
  ): Promise<runtime.ApiResponse<DeleteStatusListDefResponse>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/status-list/defs/{def_id}`.replace(
        `{${'def_id'}}`,
        encodeURIComponent(String(requestParameters.defId)),
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: DeleteStatusListDefRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteStatusListDefResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete a status list definition by identifier
   */
  async statusListDefsDefIdDelete(
    requestParameters: StatusListDefsDefIdDeleteRequest,
  ): Promise<DeleteStatusListDefResponse> {
    const response = await this.statusListDefsDefIdDeleteRaw(requestParameters);
    return await response.value();
  }

  /**
   * Assign a status list entry
   */
  async statusListDefsDefIdEntriesPostRaw(
    requestParameters: StatusListDefsDefIdEntriesPostRequest,
  ): Promise<runtime.ApiResponse<AssignStatusListEntryResponse>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdEntriesPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs/{def_id}/entries`.replace(
        `{${'def_id'}}`,
        encodeURIComponent(String(requestParameters.defId)),
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssignStatusListEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Assign a status list entry
   */
  async statusListDefsDefIdEntriesPost(
    requestParameters: StatusListDefsDefIdEntriesPostRequest,
  ): Promise<AssignStatusListEntryResponse> {
    const response =
      await this.statusListDefsDefIdEntriesPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * Search status list definition by identifier
   */
  async statusListDefsDefIdGetRaw(
    requestParameters: StatusListDefsDefIdGetRequest,
  ): Promise<runtime.ApiResponse<StatusListDef>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs/{def_id}`.replace(
        `{${'def_id'}}`,
        encodeURIComponent(String(requestParameters.defId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListDefFromJSON(jsonValue),
    );
  }

  /**
   * Search status list definition by identifier
   */
  async statusListDefsDefIdGet(
    requestParameters: StatusListDefsDefIdGetRequest,
  ): Promise<StatusListDef> {
    const response = await this.statusListDefsDefIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Search status list by list number
   */
  async statusListDefsDefIdListsListNumGetRaw(
    requestParameters: StatusListDefsDefIdListsListNumGetRequest,
  ): Promise<runtime.ApiResponse<StatusList>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdListsListNumGet.',
      );
    }

    if (
      requestParameters.listNum === null ||
      requestParameters.listNum === undefined
    ) {
      throw new runtime.RequiredError(
        'listNum',
        'Required parameter requestParameters.listNum was null or undefined when calling statusListDefsDefIdListsListNumGet.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.issuerDid !== undefined) {
      queryParameters['issuer_did'] = requestParameters.issuerDid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs/{def_id}/lists/{list_num}`
        .replace(
          `{${'def_id'}}`,
          encodeURIComponent(String(requestParameters.defId)),
        )
        .replace(
          `{${'list_num'}}`,
          encodeURIComponent(String(requestParameters.listNum)),
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListFromJSON(jsonValue),
    );
  }

  /**
   * Search status list by list number
   */
  async statusListDefsDefIdListsListNumGet(
    requestParameters: StatusListDefsDefIdListsListNumGetRequest,
  ): Promise<StatusList> {
    const response =
      await this.statusListDefsDefIdListsListNumGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update status list definition by identifier
   */
  async statusListDefsDefIdPatchRaw(
    requestParameters: StatusListDefsDefIdPatchRequest,
  ): Promise<runtime.ApiResponse<StatusListDef>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/status-list/defs/{def_id}`.replace(
        `{${'def_id'}}`,
        encodeURIComponent(String(requestParameters.defId)),
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateStatusListDefRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListDefFromJSON(jsonValue),
    );
  }

  /**
   * Update status list definition by identifier
   */
  async statusListDefsDefIdPatch(
    requestParameters: StatusListDefsDefIdPatchRequest,
  ): Promise<StatusListDef> {
    const response = await this.statusListDefsDefIdPatchRaw(requestParameters);
    return await response.value();
  }

  /**
   * Publish all status lists under a status list definition
   */
  async statusListDefsDefIdPublishPutRaw(
    requestParameters: StatusListDefsDefIdPublishPutRequest,
  ): Promise<runtime.ApiResponse<PublishStatusListResponse>> {
    if (
      requestParameters.defId === null ||
      requestParameters.defId === undefined
    ) {
      throw new runtime.RequiredError(
        'defId',
        'Required parameter requestParameters.defId was null or undefined when calling statusListDefsDefIdPublishPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs/{def_id}/publish`.replace(
        `{${'def_id'}}`,
        encodeURIComponent(String(requestParameters.defId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublishStatusListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Publish all status lists under a status list definition
   */
  async statusListDefsDefIdPublishPut(
    requestParameters: StatusListDefsDefIdPublishPutRequest,
  ): Promise<PublishStatusListResponse> {
    const response =
      await this.statusListDefsDefIdPublishPutRaw(requestParameters);
    return await response.value();
  }

  /**
   * Search status list definitions by filters.
   */
  async statusListDefsGetRaw(
    requestParameters: StatusListDefsGetRequest,
  ): Promise<runtime.ApiResponse<QueryStatusListDefResponse>> {
    const queryParameters: any = {};

    if (requestParameters.statusPurpose !== undefined) {
      queryParameters['status_purpose'] = requestParameters.statusPurpose;
    }

    if (requestParameters.supportedCredId !== undefined) {
      queryParameters['supported_cred_id'] = requestParameters.supportedCredId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/status-list/defs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QueryStatusListDefResponseFromJSON(jsonValue),
    );
  }

  /**
   * Search status list definitions by filters.
   */
  async statusListDefsGet(
    requestParameters: StatusListDefsGetRequest,
  ): Promise<QueryStatusListDefResponse> {
    const response = await this.statusListDefsGetRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create a new status list definition
   */
  async statusListDefsPostRaw(
    requestParameters: StatusListDefsPostRequest,
  ): Promise<runtime.ApiResponse<StatusListDef>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/status-list/defs`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateStatusListDefRequestToJSON(requestParameters.body),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StatusListDefFromJSON(jsonValue),
    );
  }

  /**
   * Create a new status list definition
   */
  async statusListDefsPost(
    requestParameters: StatusListDefsPostRequest,
  ): Promise<StatusListDef> {
    const response = await this.statusListDefsPostRaw(requestParameters);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum StatusListDefsGetStatusPurposeEnum {
  Refresh = 'refresh',
  Revocation = 'revocation',
  Suspension = 'suspension',
  Message = 'message',
}
